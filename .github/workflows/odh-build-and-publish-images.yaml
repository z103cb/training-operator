# Reusable workflows for publishing Training Operator images.
# Copied from the build-and-publish-images.yaml
name: ODH Build And Publish Images

on:
  workflow_call:
    inputs:
      component-name:
        required: true
        type: string
      platforms:
        required: true
        type: string
      dockerfile:
        required: true
        type: string
      context:
        required: false
        type: string
        default: "."
      quay-repo-name:
        required: false
        type: string
        default: "opendatahub"
    secrets:
      QUAY_USERNAME:
        required: false
      QUAY_TOKEN:
        required: false

jobs:
  build-and-publish:
    name: ODH - Publish Image
    runs-on: ubuntu-latest
    env:
      GOPATH: ${{ github.workspace }}/go
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: '1.20'
    
      - name: Login to Quay.io
        id: podman-login-quay
        # Trigger workflow only for ${{ inputs.github-org }}/training-operator repository with specific branch (master, v.*-branch) or tag (v.*).
        if: >-
          (github.ref == 'refs/heads/master' || (startsWith(github.ref, 'refs/heads/v') && endsWith(github.ref, '-branch')) || startsWith(github.ref, 'refs/tags/v')) 
        shell: bash
        run: |
            podman login --username ${{ secrets.QUAY_USERNAME }} --password ${{ secrets.QUAY_TOKEN }} quay.io
      - name: Run go mod
        shell: bash
        run: |
          go mod download
      - name: Add Docker Tags
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: quay.io/${{ inputs.quay-repo-name }}/${{ inputs.component-name }}
          tags: |
            type=raw,latest
            type=sha,prefix=v1-  
      
      # Build operators inside the gh runner vm directly and then copy the go binaries to docker images using the Dockerfile.buildx
      - name: Build linux/amd64 Operator go binary
        env:
          CGO_ENABLED: 1
          GOOS: linux
          GOARCH: amd64
        shell: bash
        run: |
          CGO_ENABLED=$CGO_ENABLED GOOS=$GOOS GOARCH=$GOARCH go build -tags strictfipsruntime -a -o manager-$GOARCH cmd/training-operator.v1/main.go
        working-directory: ${{env.working-directory}}

      - name: Build linux/arm64 Operator binary
        env:
          CC: aarch64-linux-gnu-gcc
          CGO_ENABLED: 1
          GOOS: linux
          GOARCH: arm64
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu libc6-dev-arm64-cross
          CC=$CC CGO_ENABLED=$CGO_ENABLED GOOS=$GOOS GOARCH=$GOARCH go build -tags strictfipsruntime -a -o manager-$GOARCH cmd/training-operator.v1/main.go
        working-directory: ${{env.working-directory}}     
      
      - name: Build image 
        id: build-image
        uses: redhat-actions/buildah-build@v2
        with:
          image: quay.io/${{ inputs.quay-repo-name }}/${{ inputs.component-name }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: ${{ inputs.platforms }}  
          containerfiles: |
            ${{ inputs.dockerfile }}
      
      - name: Push To quay.io
        if:  always() && steps.podman-login-quay.outcome == 'success' && steps.build-image.outcome == 'success'
        id: push-to-quay
        uses: redhat-actions/push-to-registry@v2
        with:
          image: ${{ steps.build-image.outputs.image }}
          tags: ${{ steps.build-image.outputs.tags }}
      
      - name: Print image url
        if: steps.push-to-quay.outcome == 'success'
        shell: bash  
        run: echo "Image pushed to ${{ steps.push-to-quay.outputs.registry-paths }}"

      - name: Logout from Quay.io
        if: always() && steps.podman-login-quay.outcome == 'success'
        run: |
          podman logout quay.io
